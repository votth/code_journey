!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/voth/Documents/github/code_journey/CodingProblems/LeetCode/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
MyStack	easy/implementStackUsingQueues.cpp	/^class MyStack {$/;"	c	file:
Solution	criticalConnectionInNetwork.cpp	/^class Solution {$/;"	c	file:
Solution	easy/invertBinTree.cpp	/^class Solution {$/;"	c	file:
Solution	easy/linkedListCycle.cpp	/^class Solution {$/;"	c	file:
arr	medium/longest_common_string.c	/^char **arr[] = {"flower", "flow", "flight"};$/;"	v	typeref:typename:char ** []
comparision	medium/longest_common_string.c	/^void comparision(char *base, int shift)$/;"	f	typeref:typename:void
empty	easy/implementStackUsingQueues.cpp	/^		bool empty() {$/;"	f	class:MyStack	typeref:typename:bool	file:
hasCycle	easy/linkedListCycle.cpp	/^		bool hasCycle(ListNode *head) {$/;"	f	class:Solution	typeref:typename:bool	file:
invertTree	easy/invertBinTree.cpp	/^		TreeNode* invertTree(TreeNode *root) {$/;"	f	class:Solution	typeref:typename:TreeNode *	file:
main	easy/binary_search.c	/^int main(void)$/;"	f	typeref:typename:int
main	easy/decimalToBinary.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	easy/implementStackUsingQueues.cpp	/^int main() {$/;"	f	typeref:typename:int
main	easy/parent_checking.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	easy/roman_to_int.c	/^int main(void)$/;"	f	typeref:typename:int
main	hard/missingInt.cpp	/^int main() {$/;"	f	typeref:typename:int
main	medium/longest_common_string.c	/^int main(void)$/;"	f	typeref:typename:int
main	test.cpp	/^int main() {$/;"	f	typeref:typename:int
parent_check	easy/parent_checking.cpp	/^bool parent_check(const std::string &s) {$/;"	f	typeref:typename:bool
pop	easy/implementStackUsingQueues.cpp	/^		int pop() {$/;"	f	class:MyStack	typeref:typename:int	file:
print	easy/implementStackUsingQueues.cpp	/^		void print() {$/;"	f	class:MyStack	typeref:typename:void	file:
push	easy/implementStackUsingQueues.cpp	/^		void push(int x) {$/;"	f	class:MyStack	typeref:typename:void	file:
q1	easy/implementStackUsingQueues.cpp	/^		std::queue<int> q1;$/;"	m	class:MyStack	typeref:typename:std::queue<int>	file:
q2	easy/implementStackUsingQueues.cpp	/^		std::queue<int> q2;$/;"	m	class:MyStack	typeref:typename:std::queue<int>	file:
romanToInt	easy/roman_to_int.c	/^int romanToInt(char *s)$/;"	f	typeref:typename:int
search	easy/binary_search.c	/^int search(int* nums, int numsSize, int target)$/;"	f	typeref:typename:int
shortest_string_index	medium/longest_common_string.c	/^int shortest_string_index()$/;"	f	typeref:typename:int
top	easy/implementStackUsingQueues.cpp	/^		int top() {$/;"	f	class:MyStack	typeref:typename:int	file:
